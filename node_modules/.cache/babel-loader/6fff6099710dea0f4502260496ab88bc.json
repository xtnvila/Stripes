{"ast":null,"code":"var _jsxFileName = \"F:\\\\CODE\\\\LIBRARY\\\\REACTB\\\\STRIPES\\\\src\\\\context.js\";\nimport React, { useState, useContext } from 'react';\nimport sublinks from './data';\nconst AppContext = React.createContext();\nexport const AppProvider = ({\n  children\n}) => {\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n  const [isSubmenuOpen, setIsSubmenuOpen] = useState(false);\n  const [location, setLocation] = useState({});\n  const [page, setPage] = useState({\n    page: '',\n    links: []\n  });\n\n  const openSidebar = () => {\n    setIsSidebarOpen(true);\n  };\n\n  const closeSidebar = () => {\n    setIsSidebarOpen(false);\n  };\n\n  const openSubmenu = (text, coordinates) => {\n    const page = sublinks.find(link => link.page === text);\n    setPage(page);\n    setLocation(coordinates);\n    setIsSubmenuOpen(true);\n  };\n\n  const closeSubmenu = () => {\n    setIsSubmenuOpen(false);\n  };\n\n  return /*#__PURE__*/React.createElement(AppContext.Provider, {\n    value: {\n      isSubmenuOpen,\n      isSidebarOpen,\n      openSubmenu,\n      openSidebar,\n      closeSubmenu,\n      closeSidebar,\n      location,\n      page\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 12\n    }\n  }, children);\n};\nexport const useGlobalContext = () => {\n  return useContext(AppContext);\n};","map":{"version":3,"sources":["F:/CODE/LIBRARY/REACTB/STRIPES/src/context.js"],"names":["React","useState","useContext","sublinks","AppContext","createContext","AppProvider","children","isSidebarOpen","setIsSidebarOpen","isSubmenuOpen","setIsSubmenuOpen","location","setLocation","page","setPage","links","openSidebar","closeSidebar","openSubmenu","text","coordinates","find","link","closeSubmenu","useGlobalContext"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C;AACA,OAAOC,QAAP,MAAqB,QAArB;AAIA,MAAMC,UAAU,GAAGJ,KAAK,CAACK,aAAN,EAAnB;AAEA,OAAO,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACzC,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCR,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAACS,aAAD,EAAgBC,gBAAhB,IAAoCV,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACa,IAAD,EAAOC,OAAP,IAAkBd,QAAQ,CAAC;AAAEa,IAAAA,IAAI,EAAE,EAAR;AAAYE,IAAAA,KAAK,EAAE;AAAnB,GAAD,CAAhC;;AAEA,QAAMC,WAAW,GAAG,MAAM;AACtBR,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACH,GAFD;;AAIA,QAAMS,YAAY,GAAG,MAAM;AACvBT,IAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACH,GAFD;;AAIA,QAAMU,WAAW,GAAG,CAACC,IAAD,EAAOC,WAAP,KAAuB;AACvC,UAAMP,IAAI,GAAGX,QAAQ,CAACmB,IAAT,CAAeC,IAAD,IAAUA,IAAI,CAACT,IAAL,KAAcM,IAAtC,CAAb;AACAL,IAAAA,OAAO,CAACD,IAAD,CAAP;AACAD,IAAAA,WAAW,CAACQ,WAAD,CAAX;AACAV,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACH,GALD;;AAOA,QAAMa,YAAY,GAAG,MAAM;AACvBb,IAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACH,GAFD;;AAOA,sBAAO,oBAAC,UAAD,CAAY,QAAZ;AAAqB,IAAA,KAAK,EAAE;AAC/BD,MAAAA,aAD+B;AAChBF,MAAAA,aADgB;AACDW,MAAAA,WADC;AACYF,MAAAA,WADZ;AACyBO,MAAAA,YADzB;AACuCN,MAAAA,YADvC;AACqDN,MAAAA,QADrD;AAC+DE,MAAAA;AAD/D,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGFP,QAHE,CAAP;AAKH,CAjCM;AAoCP,OAAO,MAAMkB,gBAAgB,GAAG,MAAM;AAClC,SAAOvB,UAAU,CAACE,UAAD,CAAjB;AACH,CAFM","sourcesContent":["import React, { useState, useContext } from 'react'\r\nimport sublinks from './data'\r\n\r\n\r\n\r\nconst AppContext = React.createContext();\r\n\r\nexport const AppProvider = ({ children }) => {\r\n    const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n    const [isSubmenuOpen, setIsSubmenuOpen] = useState(false);\r\n    const [location, setLocation] = useState({})\r\n    const [page, setPage] = useState({ page: '', links: [] })\r\n\r\n    const openSidebar = () => {\r\n        setIsSidebarOpen(true)\r\n    }\r\n\r\n    const closeSidebar = () => {\r\n        setIsSidebarOpen(false)\r\n    }\r\n\r\n    const openSubmenu = (text, coordinates) => {\r\n        const page = sublinks.find((link) => link.page === text);\r\n        setPage(page)\r\n        setLocation(coordinates)\r\n        setIsSubmenuOpen(true)\r\n    }\r\n\r\n    const closeSubmenu = () => {\r\n        setIsSubmenuOpen(false)\r\n    }\r\n\r\n\r\n\r\n\r\n    return <AppContext.Provider value={{\r\n        isSubmenuOpen, isSidebarOpen, openSubmenu, openSidebar, closeSubmenu, closeSidebar, location, page,\r\n    }}>\r\n        {children}\r\n    </AppContext.Provider>\r\n}\r\n\r\n\r\nexport const useGlobalContext = () => {\r\n    return useContext(AppContext)\r\n}\r\n"]},"metadata":{},"sourceType":"module"}